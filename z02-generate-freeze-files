#!/usr/bin/bash

# Created by: Stephen P. Vicchio 

# The purpose of this script is to create a PBS for a job 
# submission onto Flux. 
#
# The following input is needed:
# $1 - molecule 
# $2 - job type (freeze, relax, TS) 
# $3 - level of theory (B3LYP, am1, pbe)
# 
# Note that this script is not written in the easiest way to understand. 
# The script used the echo command to insert the necessary information
# into a file. 

molecule=$1
test_type=$2
short_level_of_theory=$3

tpl=/home/vicchio/puckering/z_tpl
tpl_file=gaussian-bxyl_hm_issue_freeze.txt


cores_per_node=1
memory_job=15
total_memory=$(echo ${cores_per_node} ${memory_job} | awk '{ print $1*$2 }' )

if [ ${1} == "oxane" ]; then
    input_list=../y0-input_list.txt
    input=$(head -n 1 ../y1-level_of_theory_basis_set.txt)
    cp ../0_initial-coordinates/*.com .

    for file_unedit in $( <$input_list); do

    file=${file_unedit%.com}

    ########                CREATES THE PBS FILE                #########


        PBS_file=PBS-${2}-${file}.txt # creates the PBS file
        run=${1}-${2}-${file} # creates the name of the run

        # The following section insert the required information for the
        # PBS file.
        echo '#### PBS Preamble' > ${PBS_file}
        echo >> ${PBS_file}
        echo '# This file was created automatically.' >> ${PBS_file}
        echo >> ${PBS_file}

        echo "#PBS -N $run" >> ${PBS_file}
        echo '#PBS -M vicchio@umich.edu' >> ${PBS_file}
        echo '#PBS -m a' >> ${PBS_file}

        echo >> ${PBS_file}

        echo "#PBS -l nodes=1:ppn=${cores_per_node},pmem=${memory_job}GB,walltime=03:30:00" >> ${PBS_file}
        echo "#PBS -j oe" >> ${PBS_file}
        echo "#PBS -o out-${2}-${file}.err" >> ${PBS_file}
        echo '#PBS -V' >> ${PBS_file}

        echo >> ${PBS_file}

        echo '#PBS -A hbmayes_fluxod' >> ${PBS_file}
        echo '#PBS -q fluxod' >> ${PBS_file}
        echo '#PBS -l qos=flux' >> ${PBS_file}

        echo >> ${PBS_file}

        echo '####  End PBS preamble' >> ${PBS_file}

        echo >> ${PBS_file}
        echo >> ${PBS_file}

        echo 'if [ -n "$PBS_O_WORKDIR" ]; then' >> ${PBS_file}
        echo 'cd $PBS_O_WORKDIR;' >> ${PBS_file}
        echo "fi" >> ${PBS_file}

        echo >> ${PBS_file}

        # Load all modules below:

        echo 'module load gaussian/09-revD01' >> ${PBS_file}

        # Put job commands here:
        echo >> ${PBS_file}

        echo "g09 <${file}.com> ${1}-${file}-${2}_${3}.log" >> ${PBS_file}

    ########                CREATES THE COM FILE                #########

        # This part of the script modifies the Gaussian Input (.com) file:

        sed -i "1s/.*/%mem=${total_memory}GB/" ${file}.com
        sed -i "2s/.*/%nprocshared=${cores_per_node}/" ${file}.com

        sed -i "3s/.*/%chk=\/scratch\/hbmayes_fluxod\/vicchio\/${1}-${2}_${3}\/${1}-${file}-${2}_${3}.chk/" ${file}.com
        sed -i "4s/.*/${input}/" ${file}.com
        sed -i "4s/$/\n/" ${file}.com
        sed -i "5s/$/\nFrom '{file}'.sdf/" ${file}.com
        sed -i "5s/$/\n/" ${file}.com


        sed -i '$d' ${file}.com

        sed -i '$s/$/\nD   1    2    3    4 F/' ${file}.com
        sed -i '$s/$/\nD   2    3    4    5 F/' ${file}.com
        sed -i '$s/$/\nD   3    4    5    6 F/' ${file}.com
        sed -i '$s/$/\nD   4    5    6    1 F/' ${file}.com
        sed -i '$s/$/\nD   5    6    1    2 F/' ${file}.com
        sed -i '$s/$/\nD   6    1    2    3 F/' ${file}.com

        sed -i '$s/$/\n/' ${file}.com
        sed -i '$s/$/\n/' ${file}.com

    done

else

    input_list=y0-input_list.txt

    ls *.xyz > ${input_list}

    for file_unedit in $( <$input_list); do
                    file=${file_unedit%.xyz}
                    ########                CREATES THE PBS FILE                #########

                            PBS_file=PBS-${2}-${file}.txt # creates the PBS file
                            run=${1}-${2}-${file} # creates the name of the run

                            # The following section insert the required information for the
                            # PBS file.
                            echo '#### PBS Preamble' > ${PBS_file}
                            echo >> ${PBS_file}
                            echo '# This file was created automatically.' >> ${PBS_file}
                            echo >> ${PBS_file}

                            echo "#PBS -N $run" >> ${PBS_file}
                            echo '#PBS -M vicchio@umich.edu' >> ${PBS_file}
                            echo '#PBS -m a' >> ${PBS_file}

                            echo >> ${PBS_file}

                            echo '#PBS -l nodes=1:ppn=2,pmem=10gb,walltime=03:30:00' >> ${PBS_file}
                            echo "#PBS -j oe" >> ${PBS_file}
                            echo "#PBS -o out-${2}-${file}.err" >> ${PBS_file}
                            echo '#PBS -V' >> ${PBS_file}

                            echo >> ${PBS_file}

                            echo '#PBS -A hbmayes_fluxod' >> ${PBS_file}
                                echo '#PBS -q fluxod' >> ${PBS_file}
                                echo '#PBS -l qos=flux' >> ${PBS_file}

                                echo >> ${PBS_file}

                            echo '####  End PBS preamble' >> ${PBS_file}

                            echo >> ${PBS_file}
                            echo >> ${PBS_file}

                            echo 'if [ -n "$PBS_O_WORKDIR" ]; then' >> ${PBS_file}
                            echo 'cd $PBS_O_WORKDIR;' >> ${PBS_file}
                            echo "fi" >> ${PBS_file}

                            echo >> ${PBS_file}

                            # Load all modules below:

                            echo 'module load gaussian/09-revD01' >> ${PBS_file}

                            # Put job commands here:
                            echo >> ${PBS_file}

                            echo "g09 <${file}.com> ${file}-${2}_${3}.log" >> ${PBS_file}

                       ########                CREATES THE COM FILE                #########

                       # This part of the script modifies the Gaussian Input (.com) file:

                        cat ${tpl}/${tpl_file} > ${file}-temp1.com

                        tail -n 20 ${file}.xyz >> ${file}-temp1.com

                        sed -e "s/\$chkfile/${file}-${test_type}_${short_level_of_theory}.chk/g" ${file}-temp1.com >> ${file}-temp.com
                        sed -e "s/\$folder/${molecule}-${test_type}_${3}/g" ${file}-temp.com >> ${file}-temp2.com
                        sed -e "s/\$orginal_file/${file_unedit}/g" ${file}-temp2.com >> ${file}-temp3.com
                        sed -e "s/\$coords/${coordinates}/g" ${file}-temp3.com >> ${file}-temp4.com
                        sed -e "s/level_of_theory/${short_level_of_theory}/g" ${file}-temp4.com >> ${file}-temp-final.com

                        mv ${file}-temp-final.com ${file}.com

                        rm ${file}-temp*

                        sed -i '$s/$/\n/' ${file}.com

                        sed -i '$s/$/\nD   8    1    9    13 F/' ${file}.com
                        sed -i '$s/$/\nD   1    9   13    17 F/' ${file}.com
                        sed -i '$s/$/\nD   9   13   17     5 F/' ${file}.com
                        sed -i '$s/$/\nD  13   17    5     8 F/' ${file}.com
                        sed -i '$s/$/\nD  17    5    8     1 F/' ${file}.com
                        sed -i '$s/$/\nD   5    8    1     9 F/' ${file}.com


                        sed -i '$s/$/\n/' ${file}.com
                        sed -i '$s/$/\n/' ${file}.com

                    done
fi

new_directory=/scratch/hbmayes_fluxod/vicchio/${1}-${2}_${3}

if [ ! -d "${new_directory}" ]; then
	mkdir ${new_directory}
fi


